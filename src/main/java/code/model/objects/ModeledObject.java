package code.model.objects;

/**
 * Defines basic functionality for celestial bodies and spaceships.
 */
public interface ModeledObject {
    /**
     * Gravitational Constant
     */
    double G = 6.6743e-20;

    /**
     * Retrieves the coordinates of the modeled object as an array of doubles.
     *
     * @return an array of doubles representing the coordinates of the modeled object.
     */
    double[] getCoordinates();

    /**
     * Sets the coordinates of the modeled object.
     *
     * @param coordinates an array of doubles representing the new coordinates for the modeled object.
     */
    void setCoordinates(double[] coordinates);

    /**
     * Retrieves the velocity of the modeled object.
     *
     * @return an array of doubles representing the velocity of the modeled object.
     */
    double[] getVelocity();

    /**
     * Sets the velocity of the modeled object.
     *
     * @param velocity an array of doubles containing the new velocity for the modeled object.
     */
    void setVelocity(double[] velocity);

    /**
     * Retrieves the mass of the modeled object.
     *
     * @return a long representing the mass of the modeled object.
     */
    long getMass();

    /**
     * This function can calculate how much force does planet 2 apply to planet 1 and turn it to acceleration.
     * It uses Newtonâ€™s law of universal gravity for 3 dimensions.
     *
     * @param planetObject the planet that is interacting with the current planet
     * @return the acceleration vector of the force generated by the attraction between planet 1 and planet 2
     */
    double[] accelerationBetween(PlanetObject planetObject);
}
